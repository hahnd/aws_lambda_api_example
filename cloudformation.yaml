AWSTemplateFormatVersion: '2010-09-09'
Description: Web application that returns
Parameters:
  BucketName:
    Type: String
    Description: Name of the bucket where lambda code can be found
Resources:
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: myip
      Code:
        S3Bucket: !Sub '${BucketName}'
        S3Key: lambda_code.zip
      Handler: myip.lambda_main
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt LambdaRole1.Arn
      Runtime: python3.7

  LambdaRole1:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-role-1
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: lambda-policy-1
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/myip:*'


  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: myip
      EndpointConfiguration:
        Types:
          - EDGE
      Body:
        openapi: "3.0.1"
        info:
          title: "myip"
        paths:
          /myip:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:myip/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Allow-Headers:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: "mock"
        components: {}

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGateway
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: v1

  ExecuteApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction1.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
          - ''
          - - 'arn:aws:execute-api:'
            - !Sub '${AWS::Region}:'
            - !Sub '${AWS::AccountId}:'
            - !Ref ApiGateway
            - /*/GET/myip
